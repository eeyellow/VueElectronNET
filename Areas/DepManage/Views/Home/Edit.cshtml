@using ElectronApp.Enums;
@model ElectronApp.Areas.DepManage.ViewModels.fvmEdit

@{
    //取得資料
    var UrlDataSource = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetEditDataAsync).ReplaceAsyncEmpty());
    //送出資料
    var UrlPostData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.PostEditDataAsync).ReplaceAsyncEmpty());
    //取得現有部門資料
    var UrlAllDepData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetAllDepData).ReplaceAsyncEmpty());
    //取得現有使用者資料
    var UrlAllUserData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetAllUserData).ReplaceAsyncEmpty());
    var FileSource = @Url.Action("Show", "File", new 
    { 
        Area = "",
        ID = (int)UploadFileRefTypeEnum.Department, 
        key = EncryptTool.AesEncrypt(Model.ID.ToString()) 
    });
    var DownloadFile = @Url.Action("Download", "File", new
    {
        Area = "",
        ID = (int)UploadFileRefTypeEnum.Department
    });
    var DeleteFile = @Url.Action("Delete", "File", new 
    { 
        Area = "",
        ID = (int)UploadFileRefTypeEnum.Department 
    });
}

@section Scripts {
    <script>
        let PageScope = {
            Url: {
                DataSource: '@UrlDataSource',
                PostData: '@UrlPostData',
                AllDepData: '@UrlAllDepData',
                UrlAllUserData: '@UrlAllUserData',
                FileSource: '@FileSource',
                DownloadFile: '@DownloadFile',
                DeleteFile: '@DeleteFile',
            },
            ID: '@Model.ID',
            VueMode: '@Model.VueMode',
            FileData: [],
        };
    </script>
    <script type="module">
        // Tools
        import { format as dateFnsFormat } from "/node_modules/date-fns/format.mjs";
        import {
            StringToStruct,
            CleanStructError,
            ModelMapping,
            ModelMappingForce,
            GetFormData,
        } from "/js/GeneralTool.js";
        // ViewModels
        import { fvmEdit } from "/js/TypeModules/Areas/DepManage/ViewModels/fvmEdit.js";
        import { fvmEditUsers } from "/js/TypeModules/Areas/DepManage/ViewModels/fvmEditUsers.js";
        import { fvmEarthlyBranch } from "/js/TypeModules/Areas/DepManage/ViewModels/fvmEarthlyBranch.js";
        // Enums
        import { VueModeEnum, EarthlyBranchesEnum } from "/js/TypeModules/Enums/EnumType.js";
        Vue.createApp({
            components: {
                "lc-datepicker": window.VueDatePicker,
                "lc-select": window["vue-select"],
            },
            data () {
                return {
                    ApplyData: new fvmEdit(),
                    ID: PageScope.ID,
                    VueMode: PageScope.VueMode,
                    VueModeEnum: VueModeEnum,
                    EarthlyBranchesEnum: EarthlyBranchesEnum,
                    AllDepData: [],
                    AllUserData: [],
                    FileData: [],
                };
            },
            computed: {
                IsEditable () {
                    return (
                        this.VueMode == this.VueModeEnum.Edit.Value
                    );
                },
            },
            async beforeCreate () {
                // #region 取得全部部門資料
                try {
                    let response = await fetch(PageScope.Url.AllDepData, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector("[name='__RequestVerificationToken']").value
                        }
                    });
                    if (response.ok) {
                        let data = await response.json();
                        this.AllDepData = data;
                    }
                } catch (error) {
                    console.log(`Error: ${error}`);
                }
                // #endregion 取得全部部門資料

                // #region 取得全部人員資料
                try {
                    let response = await fetch(PageScope.Url.UrlAllUserData, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector("[name='__RequestVerificationToken']").value
                        }
                    });
                    if (response.ok) {
                        let data = await response.json();

                        this.AllUserData = data;
                    }
                } catch (error) {
                    console.log(`Error: ${error}`);
                }
                // #endregion 取得全部人員資料

                if (this.ID != 0) {
                    await this.getInitModel();
                }
            },
            methods: {
                /** 取得初始化資料 */
                async getInitModel () {
                    try {
                        const response = await $.ajax({
                            url: PageScope.Url.DataSource + "/" + PageScope.ID,
                            type: "POST",
                            headers: {
                                RequestVerificationToken: document.querySelector(
                                    "[name='__RequestVerificationToken']"
                                ).value,
                            },
                        });
                        ModelMappingForce(this.ApplyData, response);
                    } catch (err) {
                        console.error(err);
                    }

                    try {
                        const response = await $.ajax({
                            url: PageScope.Url.FileSource,
                            type: "POST",
                            headers: {
                                RequestVerificationToken: document.querySelector(
                                    "[name='__RequestVerificationToken']"
                                ).value,
                            },
                        });
                        this.FileData = response;
                    }
                    catch (err) {
                        console.error(err);
                    }
                },
                /** 日期格式 => yyyy/MM/dd */
                formatEstablishDate (date) {
                    const formateDate = dateFnsFormat(date, 'yyyy/MM/dd')
                    return formateDate
                },
                /** 送出表單 */
                async postForm () {
                    // 先將錯誤訊息清空
                    CleanStructError(this.ApplyData);
                    // Step1: Validate
                    try {
                        const formData = GetFormData(this.ApplyData);
                        // 整理上傳檔案
                        const fileInput = document.querySelector('input[type="file"]')
                        for (let i = 0; i < fileInput.files.length; i++) {
                            formData.append('files', fileInput.files[i])
                        }

                        const vueInstance = this;

                        await fetch(PageScope.Url.PostData, {
                            method: 'POST',
                            headers: {
                                RequestVerificationToken: document.querySelector("[name='__RequestVerificationToken']").value,
                            },
                            body: formData
                        }).then(async (response) => {
                            const responseData = await response.json();
                            if (response.status >= 400 && response.status < 600) {
                                throw responseData;
                            }
                            return responseData;
                        }).then((returnedResponse) => {
                            ModelMappingForce(returnedResponse, vueInstance.ApplyData)
                            Swal.fire({
                                title: '儲存成功!',
                                text: 'Success',
                                icon: 'success',
                                confirmButtonText: 'Cool'
                            })
                            //history.go(-1);
                        }).catch(function (err) {
                            const model = err.Data;
                            ModelMappingForce(model, vueInstance.ApplyData);
                            const modelstate = err.ModelState;

                            switch (err.status) {
                                case 400:
                                    const model = err.responseJSON.Data;
                                    ModelMappingForce(model, this.ApplyData);
                                    const modelstate = err.responseJSON.ModelState;

                                    modelstate.forEach(function (ele) {
                                        StringToStruct(ele.Key, ele.Value, this.ApplyData);
                                    }, this);
                                    if (this.ApplyData.ModelError__AlertMessage) {
                                        Swal.fire({
                                            title: 'Error!',
                                            text: this.ApplyData.ModelError__AlertMessage,
                                            icon: 'error',
                                            confirmButtonText: 'Cool'
                                        })
                                    }
                                    break;
                                case 500:
                                    Swal.fire({
                                        title: 'Error!',
                                        text: 'Do you want to continue',
                                        icon: 'error',
                                        confirmButtonText: 'Cool'
                                    })
                                    break;
                            }
                        })
                    } catch (err) {

                        Swal.fire({
                            title: 'Error!',
                            text: 'Do you want to continue',
                            icon: 'error',
                            confirmButtonText: 'Cool'
                        })
                    }
                },
                /** 新增人員 */
                addUser () {
                    this.ApplyData.Users.push(new fvmEditUsers());
                },
                /** 移除人員*/
                removeUser (id) {
                    const targetUser = this.ApplyData.Users.find(d => d.ID == id);
                    const idx = this.ApplyData.Users.indexOf(targetUser);
                    if (targetUser.ID == 0) {
                        this.ApplyData.Users.splice(idx, 1);
                    }
                    else {
                        targetUser.IsDelete = 1;
                    }
                },
                /** 編輯人員 */
                updateUser (user, selected) {
                    user.UserID = selected.UserID;
                },
                /** 編輯地支 */
                updateEarthlyBranch (e) {
                    if (e.target.checked) {
                        const item = new fvmEarthlyBranch();
                        item.EnumValue = e.target.value;
                        this.ApplyData.EarthlyBranch.push(item);
                    }
                    else {
                        const target = this.ApplyData.EarthlyBranch.find(d => d.EnumValue == e.target.value);
                        const idx = this.ApplyData.EarthlyBranch.indexOf(target);
                        if (target.ID == 0) {
                            this.ApplyData.EarthlyBranch.splice(idx, 1);
                        }
                        else {
                            target.IsDelete = 1;
                        }
                    }
                },
                /** 刪除檔案 */
                async deleteFile (file) {
                    const targetFileIdx = this.FileData.findIndex(d => d == file);
                    Swal.fire({
                        title: "確定刪除?",
                        text: "You won't be able to revert this!",
                        icon: "warning",
                        showCancelButton: true,
                        confirmButtonColor: "#3085d6",
                        cancelButtonColor: "#d33",
                        confirmButtonText: "確定"
                    }).then((result) => {
                        if (result.isConfirmed) {
                            const url = `${PageScope.Url.DeleteFile}`;
                            const formData = new FormData();
                            formData.append("key", file.ID);
                            fetch(url, { method: 'DELETE', body: formData })
                                .then(res => {
                                    if (res.status == 200) {
                                        Swal.fire({
                                            title: "Deleted!",
                                            text: "Your file has been deleted.",
                                            icon: "success"
                                        });
                                        this.FileData.splice(targetFileIdx, 1);
                                    }
                                    else {
                                        return res.json()
                                    }
                                })
                                .then(res => {
                                    if (res) {
                                        alert(res)
                                    }
                                })
                            
                        }
                    });
                },
                /** 下載檔案 */
                async downloadFile (file) {
                    const url = `${PageScope.Url.DownloadFile}`;
                    const formData = new FormData();
                    formData.append("key", file.ID);
                    fetch(url, { method: 'POST', body: formData })
                        .then(res => res.blob())
                        .then(blob => {
                            const elemx = window.document.createElement('a');
                            elemx.href = window.URL.createObjectURL(blob);
                            elemx.download = file.Name;
                            elemx.style.display = 'none';
                            document.body.appendChild(elemx);
                            elemx.click();
                            document.body.removeChild(elemx);
                        });
                },
            }
        }).mount("#app");;
    </script>
}

@Html.AntiForgeryToken()

<div id="app" v-cloak>
    <div class="mb-3">
        <label class="form-label"><strong>名稱</strong></label>
        <input type="text" class="form-control"
            v-model="ApplyData.Name" :disabled="!IsEditable" />
        <span class="field-validation-error">
            {{ ApplyData.ModelError__Name }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label"><strong>縮寫</strong></label>
        <input type="text" class="form-control"
               v-model="ApplyData.Alias" :disabled="!IsEditable" />
        <span class="field-validation-error">
            {{ ApplyData.ModelError__Alias }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label"><strong>上層部門</strong></label>
        <lc-select v-model="ApplyData.ParentID"
                   :options="AllDepData"
                   :reduce="opt => opt.ID"
                   :clearable="false"
                   label="Name"
                   placeholder="請選擇"
                   :disabled="!IsEditable">
        </lc-select>
        <span class="field-validation-error">
            {{ ApplyData.ModelError__ParentID }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label"><strong>成立日期</strong></label>
        <lc-datepicker 
            v-model="ApplyData.EstablishDate"
            :format="formatEstablishDate"
            model-type="yyyy/MM/dd"
            placeholder="請選擇日期"
            auto-apply
            :enable-time-picker="false"
            :disabled="!IsEditable">
        </lc-datepicker>
        <span class="field-validation-error">
            {{ ApplyData.ModelError__EstablishDate }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label"><strong>人員</strong>
            <button v-if="IsEditable" class="btn btn-warning" v-on:click="addUser">
                <i class="fa fa-plus"></i>
            </button> 
        </label>
        <div class="row mb-2" v-for="(user, idx) in ApplyData.Users.filter(a => a.IsDelete == 0)">
            <div class="col-11">
                <lc-select v-model="user.UserID"
                           :options="AllUserData"
                           :reduce="opt => opt.ID"
                           :clearable="false"
                           label="Name"
                           placeholder="請選擇"
                           v-on:option:selected="(selected) => updateUser(user, selected)"
                           :disabled="!IsEditable">
                </lc-select>
            </div>
            <div v-if="IsEditable" class="col-1 text-end">
                <button class="btn btn-danger" v-on:click="removeUser(user.ID)">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">
            <strong>地支</strong>
        </label>
        <div class="row mb-2" :style="IsEditable ? '' : { 'pointer-events': 'none' }">
            <div class="col-2" v-for="item in EarthlyBranchesEnum">
                <div class="form-check form-check-inline">
                    <input class="form-check-input" type="checkbox"
                            :id="'EarthlyBranches_' + item.Value"
                            :value="item.Value"
                            :checked="ApplyData.EarthlyBranch.some(a => a.EnumValue == item.Value)"
                            v-on:click="updateEarthlyBranch" />
                    <label class="form-check-label" 
                            :for="'EarthlyBranches_' + item.Value">
                            {{ item.Name }}
                    </label>
                </div>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">
            <strong>是否啟用</strong>
        </label>
        <div class="mb-2" :style="IsEditable ? '' : { 'pointer-events': 'none' }">
            <div class="form-check form-check-inline">
                <input 
                    class="form-check-input" type="radio" id="IsEnable_1" name="IsEnable" 
                    value="1" v-model="ApplyData.IsEnable">
                <label class="form-check-label" for="IsEnable_1">啟用</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="IsEnable_0" name="IsEnable" 
                    value="0" v-model="ApplyData.IsEnable">
                <label class="form-check-label" for="IsEnable_0">停用</label>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">
            <strong>附件檔案</strong>
        </label>
        <div class="mb-2" :style="IsEditable ? '' : { 'pointer-events': 'none' }">
            <div>
                <input type="file" multiple name="files" />
                <span class="field-validation-error">{{ ApplyData.ModelError__files }}</span>
            </div>
            <div v-for="file in FileData">
                <div>
                    <a class="pg-DeleteFile" href="#" title="刪除" v-on:click="deleteFile(file)"
                       style="margin-right: 10px;">
                        <i class="fa fa-times fa-lg" aria-hidden="true"></i>
                    </a>
                    <a class="pg-DownloadFile" href="#" v-on:click="downloadFile(file)">
                        {{ file.Name }}
                    </a>
                </div>
            </div>
        </div>
    </div>

    <div v-if="IsEditable" class="mb-3 pt-5">
        <button type="submit" class="btn btn-primary" v-on:click="postForm">Submit</button>
    </div>
</div>