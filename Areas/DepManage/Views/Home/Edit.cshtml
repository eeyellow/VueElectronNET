@model ElectronApp.Areas.DepManage.ViewModels.fvmEdit

@{
    //取得資料
    var UrlDataSource = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetEditDataAsync).ReplaceAsyncEmpty());
    //送出資料
    var UrlPostData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.PostEditDataAsync).ReplaceAsyncEmpty());
    //取得現有部門資料
    var UrlAllDepData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetAllDepData).ReplaceAsyncEmpty());
    //取得現有使用者資料
    var UrlAllUserData = Url.Action(nameof(ElectronApp.Areas.DepManage.Controllers.HomeController.GetAllUserData).ReplaceAsyncEmpty());

}

@section Scripts {
    <script>
        let PageScope = {
            Url: {
                DataSource: '@UrlDataSource',
                PostData: '@UrlPostData',
                AllDepData: '@UrlAllDepData',
                UrlAllUserData: '@UrlAllUserData',
            },
            ID: '@Model.ID',
            VueMode: '@Model.VueMode',            
        };
    </script>
    <script type="module">
        // Tools
        import { format as dateFnsFormat } from "/node_modules/date-fns/format.mjs";
        import {
            StringToStruct,
            CleanStructError,
            ModelMapping,
            ModelMappingForce,
            GetFormData,
        } from "/js/GeneralTool.js";
        // ViewModel
        import { fvmEdit } from "/js/TypeModules/Areas/DepManage/ViewModels/fvmEdit.js";
        import { fvmEditUsers } from "/js/TypeModules/Areas/DepManage/ViewModels/fvmEditUsers.js";
        import { VueModeEnum } from "/js/TypeModules/Enums/EnumType.js";

        // #region 取得共通資料
        

        
        // #endregion 取得共通資料
        
        Vue.createApp({
            components: {
                "lc-datepicker": window.VueDatePicker,
                "lc-select": window["vue-select"],
            },
            data () {
                return {
                    ApplyData: new fvmEdit(),
                    ID: PageScope.ID,
                    VueMode: PageScope.VueMode,
                    VueModeEnum: VueModeEnum,
                    AllDepData: [],
                    AllUserData: [],
                };
            },
            async beforeCreate () {
                // #region 取得全部部門資料
                try {
                    let response = await fetch(PageScope.Url.AllDepData, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector("[name='__RequestVerificationToken']").value
                        }
                    });
                    if (response.ok) {
                        let data = await response.json();
                        this.AllDepData = data;
                    }
                } catch (error) {
                    console.log(`Error: ${error}`);
                }
                // #endregion 取得全部部門資料

                // #region 取得全部人員資料
                try {
                    let response = await fetch(PageScope.Url.UrlAllUserData, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": document.querySelector("[name='__RequestVerificationToken']").value
                        }
                    });
                    if (response.ok) {
                        let data = await response.json();

                        this.AllUserData = data;
                    }
                } catch (error) {
                    console.log(`Error: ${error}`);
                }
                // #endregion 取得全部人員資料

                if (this.ID != 0) {
                    await this.getInitModel();
                }
            },
            methods: {
                /** 取得初始化資料 */
                async getInitModel () {
                    try {
                        const response = await $.ajax({
                            url: PageScope.Url.DataSource + "/" + PageScope.ID,
                            type: "POST",
                            headers: {
                                RequestVerificationToken: document.querySelector(
                                    "[name='__RequestVerificationToken']"
                                ).value,
                            },
                        });
                        ModelMappingForce(this.ApplyData, response);
                    } catch (err) {
                        console.error(err);
                    }
                },
                /** 日期格式 => yyyy/MM/dd */
                formatEstablishDate (date) {
                    const formateDate = dateFnsFormat(date, 'yyyy/MM/dd')
                    return formateDate
                },
                /** 送出表單 */
                async postForm () {
                    // 先將錯誤訊息清空
                    CleanStructError(this.ApplyData);
                    // Step1: Validate
                    try {                        
                        const response = await $.ajax({
                            url: PageScope.Url.PostData,
                            type: "POST",
                            headers: {
                                RequestVerificationToken: document.querySelector(
                                    "[name='__RequestVerificationToken']"
                                ).value,
                            },
                            data: {
                                fvm: this.ApplyData,
                            },
                        });
                        
                        Swal.fire({
                            title: '儲存成功!',
                            text: 'Success',
                            icon: 'success',
                            confirmButtonText: 'Cool'
                        })
                    } catch (err) {

                        switch (err.status) {
                            case 400:
                                const model = err.responseJSON.Data;
                                ModelMappingForce(model, this.ApplyData);
                                const modelstate = err.responseJSON.ModelState;

                                modelstate.forEach(function (ele) {
                                    StringToStruct(ele.Key, ele.Value, this.ApplyData);
                                }, this);
                                if (this.ApplyData.ModelError__AlertMessage) {
                                    //alert(this.ApplyData.ModelError__AlertMessage);
                                    Swal.fire({
                                        title: 'Error!',
                                        text: this.ApplyData.ModelError__AlertMessage,
                                        icon: 'error',
                                        confirmButtonText: 'Cool'
                                    })
                                }
                                break;
                            case 500:
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Do you want to continue',
                                    icon: 'error',
                                    confirmButtonText: 'Cool'
                                })
                                break;
                        }
                    }
                },
                /** 新增人員 */
                addUser () {
                    this.ApplyData.Users.push(new fvmEditUsers());
                },
                /** 移除人員*/
                removeUser (id) {
                    const targetUser = this.ApplyData.Users.find(d => d.ID == id);
                    const idx = this.ApplyData.Users.indexOf(targetUser);
                    if (targetUser.ID == 0) {
                        this.ApplyData.Users.splice(idx, 1);
                    }
                    else {
                        targetUser.IsDelete = 1;
                    }
                },
                /** 編輯人員 */
                updateUser (user, selected) {
                    user.UserID = selected.UserID;
                }
            }
        }).mount("#app");;
    </script>
}

@Html.AntiForgeryToken()

<div id="app" v-cloak>
    <div class="mb-3">
        <label class="form-label">名稱</label>
        <input type="text" class="form-control" v-model="ApplyData.Name" />
        <span class="field-validation-error">
            {{ ApplyData.ModelError__Name }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label">縮寫</label>
        <input type="text" class="form-control" v-model="ApplyData.Alias" />
        <span class="field-validation-error">
            {{ ApplyData.ModelError__Alias }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label">上層部門</label>
        <lc-select 
            v-model="ApplyData.ParentID"
            :options="AllDepData"
            :reduce="opt => opt.ID"
            :clearable="false"
            label="Name" 
            placeholder="請選擇">
        </lc-select>
        <span class="field-validation-error">
            {{ ApplyData.ModelError__ParentID }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label">成立日期</label>
        <lc-datepicker 
            v-model="ApplyData.EstablishDate"
            :format="formatEstablishDate"
            model-type="yyyy/MM/dd"
            placeholder="請選擇日期"
            auto-apply
            :enable-time-picker="false">
        </lc-datepicker>
        <span class="field-validation-error">
            {{ ApplyData.ModelError__EstablishDate }}
        </span>
    </div>
    <div class="mb-3">
        <label class="form-label">人員 
            <button class="btn btn-warning" v-on:click="addUser"><i class="fa fa-plus"></i></button> 
        </label>
        <div class="row mb-2" v-for="(user, idx) in ApplyData.Users.filter(a => a.IsDelete == 0)">
            <div class="col-11">
                <lc-select v-model="user.UserID"
                           :options="AllUserData"
                           :reduce="opt => opt.ID"
                           :clearable="false"
                           label="Name"
                           placeholder="請選擇"
                           v-on:option:selected="(selected) => updateUser(user, selected)">
                </lc-select>
            </div>
            <div class="col-1 text-end">
                <button class="btn btn-danger" v-on:click="removeUser(user.ID)">
                    <i class="fa fa-trash"></i>
                </button>
            </div>
        </div>
    </div>
    <div class="mb-3">
        <label class="form-label">
            是否啟用
        </label>
        <div class="mb-2">
            <div class="form-check form-check-inline">
                <input 
                    class="form-check-input" type="radio" id="IsEnable_1" name="IsEnable" 
                    value="1" v-model="ApplyData.IsEnable">
                <label class="form-check-label" for="IsEnable_1">啟用</label>
            </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="radio" id="IsEnable_0" name="IsEnable" 
                    value="0" v-model="ApplyData.IsEnable">
                <label class="form-check-label" for="IsEnable_0">停用</label>
            </div>
        </div>
    </div>
    <div class="mb-3 pt-5">
        <button type="submit" class="btn btn-primary" v-on:click="postForm">Submit</button>
    </div>
</div>